//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v25.10.0.0
//   At: 2025-03-30T22:46:58.6225741-05:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<IEntityFactory, GeneratedEntityFactory>();
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<SttEntities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<BlinkServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HueServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RingServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

/// <summary>
/// Allows HassModel to instantiate the correct generated Entity types
/// </summary>
public class GeneratedEntityFactory : IEntityFactory
{
    public Entity CreateEntity(IHaContext haContext, string entityId)
    {
        var dot = entityId.IndexOf('.', StringComparison.Ordinal);
        var domain = dot < 0 ? entityId.AsSpan() : entityId[..dot];
        return domain switch
        {
            "alarm_control_panel" => new AlarmControlPanelEntity(haContext, entityId),
            "binary_sensor" => new BinarySensorEntity(haContext, entityId),
            "button" => new ButtonEntity(haContext, entityId),
            "camera" => new CameraEntity(haContext, entityId),
            "climate" => new ClimateEntity(haContext, entityId),
            "conversation" => new ConversationEntity(haContext, entityId),
            "cover" => new CoverEntity(haContext, entityId),
            "device_tracker" => new DeviceTrackerEntity(haContext, entityId),
            "input_boolean" => new InputBooleanEntity(haContext, entityId),
            "light" => new LightEntity(haContext, entityId),
            "media_player" => new MediaPlayerEntity(haContext, entityId),
            "person" => new PersonEntity(haContext, entityId),
            "scene" => new SceneEntity(haContext, entityId),
            "sensor" when IsNumeric() => new NumericSensorEntity(haContext, entityId),
            "sensor" => new SensorEntity(haContext, entityId),
            "stt" => new SttEntity(haContext, entityId),
            "sun" => new SunEntity(haContext, entityId),
            "switch" => new SwitchEntity(haContext, entityId),
            "tts" => new TtsEntity(haContext, entityId),
            "weather" => new WeatherEntity(haContext, entityId),
            "zone" => new ZoneEntity(haContext, entityId),
            _ => new Entity(haContext, entityId)};
        bool IsNumeric() => haContext.GetState(entityId)?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false;
    }
}

public interface IEntities
{
    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CoverEntities Cover { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    InputBooleanEntities InputBoolean { get; }

    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    PersonEntities Person { get; }

    SceneEntities Scene { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    TtsEntities Tts { get; }

    ConversationEntities Conversation { get; }

    SttEntities Stt { get; }

    AlarmControlPanelEntities AlarmControlPanel { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public TtsEntities Tts => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public SttEntities Stt => new(_haContext);
    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all binary_sensor entities currently registered (at runtime) in Home Assistant as BinarySensorEntity</summary>
    public IEnumerable<BinarySensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("binary_sensor.")).Select(e => new BinarySensorEntity(e));
    ///<summary>Basement Battery</summary>
    public BinarySensorEntity BasementBattery => new(_haContext, "binary_sensor.basement_battery");
    ///<summary>Basement Motion</summary>
    public BinarySensorEntity BasementMotion => new(_haContext, "binary_sensor.basement_motion");
    ///<summary>Closet Sensor Motion</summary>
    public BinarySensorEntity ClosetSensorMotion => new(_haContext, "binary_sensor.closet_sensor_motion");
    ///<summary>Front Door Ding</summary>
    public BinarySensorEntity FrontDoorDing => new(_haContext, "binary_sensor.front_door_ding");
    ///<summary>Front Door Motion</summary>
    public BinarySensorEntity FrontDoorMotion => new(_haContext, "binary_sensor.front_door_motion");
    ///<summary>Garage Motion</summary>
    public BinarySensorEntity GarageMotion => new(_haContext, "binary_sensor.garage_motion");
    ///<summary>Hallway Sensor Motion</summary>
    public BinarySensorEntity HallwaySensorMotion => new(_haContext, "binary_sensor.hallway_sensor_motion");
    ///<summary>Laundry Room Sensor Motion</summary>
    public BinarySensorEntity LaundryRoomSensorMotion => new(_haContext, "binary_sensor.laundry_room_sensor_motion");
    ///<summary>meg Focus</summary>
    public BinarySensorEntity MegFocus => new(_haContext, "binary_sensor.meg_focus");
    ///<summary>Motion Sensor 2 Motion</summary>
    public BinarySensorEntity MotionSensor2Motion => new(_haContext, "binary_sensor.motion_sensor_2_motion");
    ///<summary>Office Motion Sensor Motion</summary>
    public BinarySensorEntity OfficeMotionSensor => new(_haContext, "binary_sensor.office_motion_sensor");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>Upstairs Battery</summary>
    public BinarySensorEntity UpstairsBattery => new(_haContext, "binary_sensor.upstairs_battery");
    ///<summary>Upstairs Motion</summary>
    public BinarySensorEntity UpstairsMotion => new(_haContext, "binary_sensor.upstairs_motion");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all button entities currently registered (at runtime) in Home Assistant as ButtonEntity</summary>
    public IEnumerable<ButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("button.")).Select(e => new ButtonEntity(e));
    ///<summary>Bedroom Button Identify</summary>
    public ButtonEntity BedroomButtonIdentify => new(_haContext, "button.bedroom_button_identify");
    ///<summary>Couch Side Table Lamp Identify</summary>
    public ButtonEntity CouchSideTableLampIdentify => new(_haContext, "button.couch_side_table_lamp_identify");
    ///<summary>Entryway Lamp Identify</summary>
    public ButtonEntity EntrywayLampIdentify => new(_haContext, "button.entryway_lamp_identify");
    ///<summary>Living Room Button Identify</summary>
    public ButtonEntity LivingRoomButtonIdentify => new(_haContext, "button.living_room_button_identify");
    ///<summary>Living Room Sentsy Identify</summary>
    public ButtonEntity LivingRoomSentsyIdentify => new(_haContext, "button.living_room_sentsy_identify");
    ///<summary>Motion Sensor 2 Identify</summary>
    public ButtonEntity MotionSensor2Identify => new(_haContext, "button.motion_sensor_2_identify");
    ///<summary>Office Button Identify</summary>
    public ButtonEntity OfficeButtonIdentify => new(_haContext, "button.office_button_identify");
    ///<summary>Office Motion Sensor Identify</summary>
    public ButtonEntity OfficeMotionSensorIdentify => new(_haContext, "button.office_motion_sensor_identify");
    ///<summary>Outlet 2 Identify</summary>
    public ButtonEntity Outlet2Identify => new(_haContext, "button.outlet_2_identify");
    ///<summary>Outlet 6 Identify</summary>
    public ButtonEntity Outlet6Identify => new(_haContext, "button.outlet_6_identify");
    ///<summary>Identify</summary>
    public ButtonEntity Shapes7b48Identify => new(_haContext, "button.shapes_7b48_identify");
    ///<summary>Table Identify</summary>
    public ButtonEntity TableIdentify => new(_haContext, "button.table_identify");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all cover entities currently registered (at runtime) in Home Assistant as CoverEntity</summary>
    public IEnumerable<CoverEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("cover.")).Select(e => new CoverEntity(e));
    ///<summary>Daric&apos;s Garage Door</summary>
    public CoverEntity DaricsGarageDoor2 => new(_haContext, "cover.darics_garage_door_2");
    ///<summary>Megan&apos;s Garage Door</summary>
    public CoverEntity MegansGarageDoor => new(_haContext, "cover.megans_garage_door");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all device_tracker entities currently registered (at runtime) in Home Assistant as DeviceTrackerEntity</summary>
    public IEnumerable<DeviceTrackerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("device_tracker.")).Select(e => new DeviceTrackerEntity(e));
    ///<summary>dteske-pixel</summary>
    public DeviceTrackerEntity DteskePixel => new(_haContext, "device_tracker.dteske_pixel");
    ///<summary>meg</summary>
    public DeviceTrackerEntity Meg => new(_haContext, "device_tracker.meg");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_boolean entities currently registered (at runtime) in Home Assistant as InputBooleanEntity</summary>
    public IEnumerable<InputBooleanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_boolean.")).Select(e => new InputBooleanEntity(e));
    ///<summary>netdaemon_teske_home_assistant_apps_bedroom_automation</summary>
    public InputBooleanEntity NetdaemonTeskeHomeAssistantAppsBedroomAutomation => new(_haContext, "input_boolean.netdaemon_teske_home_assistant_apps_bedroom_automation");
    ///<summary>netdaemon_teske_home_assistant_apps_office_automation</summary>
    public InputBooleanEntity NetdaemonTeskeHomeAssistantAppsOfficeAutomation => new(_haContext, "input_boolean.netdaemon_teske_home_assistant_apps_office_automation");
    ///<summary>netdaemon_teske_home_assistant_apps_simple_alarm_light_schedule</summary>
    public InputBooleanEntity NetdaemonTeskeHomeAssistantAppsSimpleAlarmLightSchedule => new(_haContext, "input_boolean.netdaemon_teske_home_assistant_apps_simple_alarm_light_schedule");
    ///<summary>Office Motion Allowed</summary>
    public InputBooleanEntity OfficeMotionAllowed => new(_haContext, "input_boolean.office_motion_allowed");
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all light entities currently registered (at runtime) in Home Assistant as LightEntity</summary>
    public IEnumerable<LightEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("light.")).Select(e => new LightEntity(e));
    ///<summary>Basement Accent Lights</summary>
    public LightEntity BasementAccentLights => new(_haContext, "light.basement_accent_lights");
    ///<summary>Basement Lamp</summary>
    public LightEntity BasementLamp => new(_haContext, "light.basement_lamp");
    ///<summary>Basement Wall Accent 1</summary>
    public LightEntity BasementWallAccent1 => new(_haContext, "light.basement_wall_accent_1");
    ///<summary>Basement Wall Accent 2</summary>
    public LightEntity BasementWallAccent2 => new(_haContext, "light.basement_wall_accent_2");
    ///<summary>Bedroom Fan</summary>
    public LightEntity BedroomFan => new(_haContext, "light.bedroom_fan");
    ///<summary>Bedroom Fan 1</summary>
    public LightEntity BedroomFan1 => new(_haContext, "light.bedroom_fan_1");
    ///<summary>Bedroom Fan 2</summary>
    public LightEntity BedroomFan2 => new(_haContext, "light.bedroom_fan_2");
    ///<summary>Bedroom Lamp 1</summary>
    public LightEntity BedroomLamp1 => new(_haContext, "light.bedroom_lamp_1");
    ///<summary>Bedroom Lamp 2</summary>
    public LightEntity BedroomLamp2 => new(_haContext, "light.bedroom_lamp_2");
    ///<summary>Home</summary>
    public LightEntity Home => new(_haContext, "light.home");
    ///<summary>Hue Bloom 1</summary>
    public LightEntity HueBloom1 => new(_haContext, "light.hue_bloom_1");
    ///<summary>Hue Bloom 2</summary>
    public LightEntity HueBloom2 => new(_haContext, "light.hue_bloom_2");
    ///<summary>Basement Lamp 1</summary>
    public LightEntity HueColorLamp1 => new(_haContext, "light.hue_color_lamp_1");
    ///<summary>Basement Lamp 2</summary>
    public LightEntity HueColorLamp2 => new(_haContext, "light.hue_color_lamp_2");
    ///<summary>Kitchen Sink</summary>
    public LightEntity KitchenSink => new(_haContext, "light.kitchen_sink");
    ///<summary>Nightstands</summary>
    public LightEntity Nightstands => new(_haContext, "light.nightstands");
    ///<summary>Office Lights</summary>
    public LightEntity OfficeLights => new(_haContext, "light.office_lights");
    public LightEntity Shapes7b48 => new(_haContext, "light.shapes_7b48");
    ///<summary>Square Lamp</summary>
    public LightEntity SquareLamp => new(_haContext, "light.square_lamp");
    ///<summary>Square Lamp 1</summary>
    public LightEntity SquareLamp1 => new(_haContext, "light.square_lamp_1");
    ///<summary>Square Lamp 2</summary>
    public LightEntity SquareLamp2 => new(_haContext, "light.square_lamp_2");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all media_player entities currently registered (at runtime) in Home Assistant as MediaPlayerEntity</summary>
    public IEnumerable<MediaPlayerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("media_player.")).Select(e => new MediaPlayerEntity(e));
    ///<summary>Bedroom clock</summary>
    public MediaPlayerEntity BedroomClock => new(_haContext, "media_player.bedroom_clock");
    ///<summary>Office display</summary>
    public MediaPlayerEntity OfficeDisplay => new(_haContext, "media_player.office_display");
    ///<summary>Speakers</summary>
    public MediaPlayerEntity Speakers => new(_haContext, "media_player.speakers");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all person entities currently registered (at runtime) in Home Assistant as PersonEntity</summary>
    public IEnumerable<PersonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("person.")).Select(e => new PersonEntity(e));
    ///<summary>Daric Teske</summary>
    public PersonEntity DaricTeske => new(_haContext, "person.daric_teske");
    ///<summary>Megan Mayfield</summary>
    public PersonEntity MeganMayfield => new(_haContext, "person.megan_mayfield");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all scene entities currently registered (at runtime) in Home Assistant as SceneEntity</summary>
    public IEnumerable<SceneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("scene.")).Select(e => new SceneEntity(e));
    ///<summary>Home Game Day</summary>
    public SceneEntity HomeGameDay => new(_haContext, "scene.home_game_day");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));
    ///<summary>Basement Wi-Fi signal strength</summary>
    public SensorEntity BlinkBasementWiFiSignalStrength => new(_haContext, "sensor.blink_basement_wi_fi_signal_strength");
    ///<summary>Upstairs Wi-Fi signal strength</summary>
    public SensorEntity BlinkUpstairsWiFiSignalStrength => new(_haContext, "sensor.blink_upstairs_wi_fi_signal_strength");
    ///<summary>dteske-pixel Battery state</summary>
    public SensorEntity DteskePixelBatteryState => new(_haContext, "sensor.dteske_pixel_battery_state");
    ///<summary>dteske-pixel Charger type</summary>
    public SensorEntity DteskePixelChargerType => new(_haContext, "sensor.dteske_pixel_charger_type");
    ///<summary>dteske-pixel Next alarm</summary>
    public SensorEntity DteskePixelNextAlarm => new(_haContext, "sensor.dteske_pixel_next_alarm");
    ///<summary>Front Door Last activity</summary>
    public SensorEntity FrontDoorLastActivity => new(_haContext, "sensor.front_door_last_activity");
    ///<summary>Front Door Last ding</summary>
    public SensorEntity FrontDoorLastDing => new(_haContext, "sensor.front_door_last_ding");
    ///<summary>Front Door Last motion</summary>
    public SensorEntity FrontDoorLastMotion => new(_haContext, "sensor.front_door_last_motion");
    ///<summary>Front Door Volume</summary>
    public SensorEntity FrontDoorVolume => new(_haContext, "sensor.front_door_volume");
    ///<summary>Garage Last activity</summary>
    public SensorEntity GarageLastActivity => new(_haContext, "sensor.garage_last_activity");
    ///<summary>Garage Last ding</summary>
    public SensorEntity GarageLastDing => new(_haContext, "sensor.garage_last_ding");
    ///<summary>Garage Last motion</summary>
    public SensorEntity GarageLastMotion => new(_haContext, "sensor.garage_last_motion");
    ///<summary>Garage Volume</summary>
    public SensorEntity GarageVolume => new(_haContext, "sensor.garage_volume");
    ///<summary>meg Activity</summary>
    public SensorEntity MegActivity => new(_haContext, "sensor.meg_activity");
    ///<summary>meg App Version</summary>
    public SensorEntity MegAppVersion => new(_haContext, "sensor.meg_app_version");
    ///<summary>meg Battery State</summary>
    public SensorEntity MegBatteryState => new(_haContext, "sensor.meg_battery_state");
    ///<summary>meg BSSID</summary>
    public SensorEntity MegBssid => new(_haContext, "sensor.meg_bssid");
    ///<summary>meg Connection Type</summary>
    public SensorEntity MegConnectionType => new(_haContext, "sensor.meg_connection_type");
    ///<summary>meg Geocoded Location</summary>
    public SensorEntity MegGeocodedLocation => new(_haContext, "sensor.meg_geocoded_location");
    ///<summary>meg Last Update Trigger</summary>
    public SensorEntity MegLastUpdateTrigger => new(_haContext, "sensor.meg_last_update_trigger");
    ///<summary>meg Location permission</summary>
    public SensorEntity MegLocationPermission => new(_haContext, "sensor.meg_location_permission");
    ///<summary>meg SIM 1</summary>
    public SensorEntity MegSim1 => new(_haContext, "sensor.meg_sim_1");
    ///<summary>meg SIM 2</summary>
    public SensorEntity MegSim2 => new(_haContext, "sensor.meg_sim_2");
    ///<summary>meg SSID</summary>
    public SensorEntity MegSsid => new(_haContext, "sensor.meg_ssid");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Bedroom Button Battery</summary>
    public NumericSensorEntity BedroomButtonBattery => new(_haContext, "sensor.bedroom_button_battery");
    ///<summary>Basement Temperature</summary>
    public NumericSensorEntity BlinkBasementTemperature => new(_haContext, "sensor.blink_basement_temperature");
    ///<summary>Upstairs Temperature</summary>
    public NumericSensorEntity BlinkUpstairsTemperature => new(_haContext, "sensor.blink_upstairs_temperature");
    ///<summary>Closet Sensor Battery</summary>
    public NumericSensorEntity ClosetSensorBattery => new(_haContext, "sensor.closet_sensor_battery");
    ///<summary>Closet Sensor Illuminance</summary>
    public NumericSensorEntity ClosetSensorIlluminance => new(_haContext, "sensor.closet_sensor_illuminance");
    ///<summary>Closet Sensor Temperature</summary>
    public NumericSensorEntity ClosetSensorTemperature => new(_haContext, "sensor.closet_sensor_temperature");
    ///<summary>CPU Speed</summary>
    public NumericSensorEntity CpuSpeed => new(_haContext, "sensor.cpu_speed");
    ///<summary>dteske-pixel Battery level</summary>
    public NumericSensorEntity DteskePixelBatteryLevel => new(_haContext, "sensor.dteske_pixel_battery_level");
    ///<summary>dteske-pixel Sleep confidence</summary>
    public NumericSensorEntity DteskePixelSleepConfidence => new(_haContext, "sensor.dteske_pixel_sleep_confidence");
    ///<summary>Front Door Battery</summary>
    public NumericSensorEntity FrontDoorBattery => new(_haContext, "sensor.front_door_battery");
    ///<summary>Garage Battery</summary>
    public NumericSensorEntity GarageBattery => new(_haContext, "sensor.garage_battery");
    ///<summary>Hallway Sensor Battery</summary>
    public NumericSensorEntity HallwaySensorBattery => new(_haContext, "sensor.hallway_sensor_battery");
    ///<summary>Hallway Sensor Illuminance</summary>
    public NumericSensorEntity HallwaySensorIlluminance => new(_haContext, "sensor.hallway_sensor_illuminance");
    ///<summary>Hallway Sensor Temperature</summary>
    public NumericSensorEntity HallwaySensorTemperature => new(_haContext, "sensor.hallway_sensor_temperature");
    ///<summary>Laundry Room Sensor Battery</summary>
    public NumericSensorEntity LaundryRoomSensorBattery => new(_haContext, "sensor.laundry_room_sensor_battery");
    ///<summary>Laundry Room Sensor Illuminance</summary>
    public NumericSensorEntity LaundryRoomSensorIlluminance => new(_haContext, "sensor.laundry_room_sensor_illuminance");
    ///<summary>Laundry Room Sensor Temperature</summary>
    public NumericSensorEntity LaundryRoomSensorTemperature => new(_haContext, "sensor.laundry_room_sensor_temperature");
    ///<summary>Living Room Button Battery</summary>
    public NumericSensorEntity LivingRoomButtonBattery => new(_haContext, "sensor.living_room_button_battery");
    ///<summary>meg Average Active Pace</summary>
    public NumericSensorEntity MegAverageActivePace => new(_haContext, "sensor.meg_average_active_pace");
    ///<summary>meg Battery Level</summary>
    public NumericSensorEntity MegBatteryLevel => new(_haContext, "sensor.meg_battery_level");
    ///<summary>meg Distance</summary>
    public NumericSensorEntity MegDistance => new(_haContext, "sensor.meg_distance");
    ///<summary>meg Floors Ascended</summary>
    public NumericSensorEntity MegFloorsAscended => new(_haContext, "sensor.meg_floors_ascended");
    ///<summary>meg Floors Descended</summary>
    public NumericSensorEntity MegFloorsDescended => new(_haContext, "sensor.meg_floors_descended");
    ///<summary>meg Steps</summary>
    public NumericSensorEntity MegSteps => new(_haContext, "sensor.meg_steps");
    ///<summary>meg Storage</summary>
    public NumericSensorEntity MegStorage => new(_haContext, "sensor.meg_storage");
    ///<summary>Motion Sensor 2 Battery</summary>
    public NumericSensorEntity MotionSensor2Battery => new(_haContext, "sensor.motion_sensor_2_battery");
    ///<summary>Office Button Battery</summary>
    public NumericSensorEntity OfficeButtonBattery => new(_haContext, "sensor.office_button_battery");
    ///<summary>Office Motion Sensor Battery</summary>
    public NumericSensorEntity OfficeMotionSensorBattery => new(_haContext, "sensor.office_motion_sensor_battery");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sun entities currently registered (at runtime) in Home Assistant as SunEntity</summary>
    public IEnumerable<SunEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sun.")).Select(e => new SunEntity(e));
    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all switch entities currently registered (at runtime) in Home Assistant as SwitchEntity</summary>
    public IEnumerable<SwitchEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("switch.")).Select(e => new SwitchEntity(e));
    ///<summary>Basement Camera motion detection</summary>
    public SwitchEntity BasementCameraMotionDetection => new(_haContext, "switch.basement_camera_motion_detection");
    ///<summary>Closet Sensor Light sensor enabled</summary>
    public SwitchEntity ClosetSensorLightSensorEnabled => new(_haContext, "switch.closet_sensor_light_sensor_enabled");
    ///<summary>Closet Sensor Motion sensor enabled</summary>
    public SwitchEntity ClosetSensorMotionSensorEnabled => new(_haContext, "switch.closet_sensor_motion_sensor_enabled");
    ///<summary>Couch Side Table Lamp Switch</summary>
    public SwitchEntity CouchSideTableLamp => new(_haContext, "switch.couch_side_table_lamp");
    ///<summary>Entryway Lamp Switch</summary>
    public SwitchEntity EntrywayLamp => new(_haContext, "switch.entryway_lamp");
    ///<summary>Garage Siren</summary>
    public SwitchEntity GarageSiren => new(_haContext, "switch.garage_siren");
    ///<summary>Hallway Sensor Light sensor enabled</summary>
    public SwitchEntity HallwaySensorLightSensorEnabled => new(_haContext, "switch.hallway_sensor_light_sensor_enabled");
    ///<summary>Hallway Sensor Motion sensor enabled</summary>
    public SwitchEntity HallwaySensorMotionSensorEnabled => new(_haContext, "switch.hallway_sensor_motion_sensor_enabled");
    ///<summary>Laundry Room Sensor Light sensor enabled</summary>
    public SwitchEntity LaundryRoomSensorLightSensorEnabled => new(_haContext, "switch.laundry_room_sensor_light_sensor_enabled");
    ///<summary>Laundry Room Sensor Motion sensor enabled</summary>
    public SwitchEntity LaundryRoomSensorMotionSensorEnabled => new(_haContext, "switch.laundry_room_sensor_motion_sensor_enabled");
    ///<summary>Living Room Sentsy Switch</summary>
    public SwitchEntity LivingRoomSentsy => new(_haContext, "switch.living_room_sentsy");
    ///<summary>Outlet 2 Switch</summary>
    public SwitchEntity Outlet2 => new(_haContext, "switch.outlet_2");
    ///<summary>Outlet 6 Switch</summary>
    public SwitchEntity Outlet6 => new(_haContext, "switch.outlet_6");
    ///<summary>Table Switch</summary>
    public SwitchEntity Table => new(_haContext, "switch.table");
    ///<summary>Upstairs Camera motion detection</summary>
    public SwitchEntity UpstairsCameraMotionDetection => new(_haContext, "switch.upstairs_camera_motion_detection");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all weather entities currently registered (at runtime) in Home Assistant as WeatherEntity</summary>
    public IEnumerable<WeatherEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("weather.")).Select(e => new WeatherEntity(e));
    ///<summary>Home</summary>
    public WeatherEntity Home => new(_haContext, "weather.home");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all zone entities currently registered (at runtime) in Home Assistant as ZoneEntity</summary>
    public IEnumerable<ZoneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("zone.")).Select(e => new ZoneEntity(e));
    ///<summary>teske-home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all camera entities currently registered (at runtime) in Home Assistant as CameraEntity</summary>
    public IEnumerable<CameraEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("camera.")).Select(e => new CameraEntity(e));
    ///<summary>Basement</summary>
    public CameraEntity Basement => new(_haContext, "camera.basement");
    ///<summary>Front Door</summary>
    public CameraEntity FrontDoor => new(_haContext, "camera.front_door");
    ///<summary>Garage</summary>
    public CameraEntity Garage => new(_haContext, "camera.garage");
    ///<summary>Upstairs</summary>
    public CameraEntity Upstairs => new(_haContext, "camera.upstairs");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all climate entities currently registered (at runtime) in Home Assistant as ClimateEntity</summary>
    public IEnumerable<ClimateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("climate.")).Select(e => new ClimateEntity(e));
    public ClimateEntity HallwayThermostat => new(_haContext, "climate.hallway_thermostat");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all tts entities currently registered (at runtime) in Home Assistant as TtsEntity</summary>
    public IEnumerable<TtsEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("tts.")).Select(e => new TtsEntity(e));
    ///<summary>Google en com</summary>
    public TtsEntity GoogleEnCom => new(_haContext, "tts.google_en_com");
    ///<summary>Home Assistant Cloud</summary>
    public TtsEntity HomeAssistantCloud => new(_haContext, "tts.home_assistant_cloud");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all conversation entities currently registered (at runtime) in Home Assistant as ConversationEntity</summary>
    public IEnumerable<ConversationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("conversation.")).Select(e => new ConversationEntity(e));
    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class SttEntities
{
    private readonly IHaContext _haContext;
    public SttEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all stt entities currently registered (at runtime) in Home Assistant as SttEntity</summary>
    public IEnumerable<SttEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("stt.")).Select(e => new SttEntity(e));
    ///<summary>Home Assistant Cloud</summary>
    public SttEntity HomeAssistantCloud => new(_haContext, "stt.home_assistant_cloud");
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all alarm_control_panel entities currently registered (at runtime) in Home Assistant as AlarmControlPanelEntity</summary>
    public IEnumerable<AlarmControlPanelEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("alarm_control_panel.")).Select(e => new AlarmControlPanelEntity(e));
    ///<summary>Basement</summary>
    public AlarmControlPanelEntity BlinkBasement => new(_haContext, "alarm_control_panel.blink_basement");
    ///<summary>Upstairs</summary>
    public AlarmControlPanelEntity BlinkUpstairs => new(_haContext, "alarm_control_panel.blink_upstairs");
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("motion_valid")]
    public bool? MotionValid { get; init; }

    [JsonPropertyName("migrated_to_cache")]
    public bool? MigratedToCache { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("state")]
    public string? State { get; init; }

    [JsonPropertyName("expires_at")]
    public string? ExpiresAt { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>, ICoverEntityCore
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("dynamics")]
    public object? Dynamics { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("is_hue_group")]
    public bool? IsHueGroup { get; init; }

    [JsonPropertyName("hue_scenes")]
    public object? HueScenes { get; init; }

    [JsonPropertyName("hue_type")]
    public string? HueType { get; init; }

    [JsonPropertyName("lights")]
    public IReadOnlyList<string>? Lights { get; init; }

    [JsonPropertyName("off_with_transition")]
    public bool? OffWithTransition { get; init; }

    [JsonPropertyName("off_brightness")]
    public object? OffBrightness { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    [JsonPropertyName("group_type")]
    public string? GroupType { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("is_dynamic")]
    public bool? IsDynamic { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("Local Time")]
    public string? LocalTime { get; init; }

    [JsonPropertyName("Package")]
    public string? Package { get; init; }

    [JsonPropertyName("Time in Milliseconds")]
    public double? TimeinMilliseconds { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("created_at")]
    public string? CreatedAt { get; init; }

    [JsonPropertyName("answered")]
    public bool? Answered { get; init; }

    [JsonPropertyName("recording_status")]
    public string? RecordingStatus { get; init; }

    [JsonPropertyName("category")]
    public string? Category { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("temperature_valid")]
    public bool? TemperatureValid { get; init; }

    [JsonPropertyName("light_level")]
    public double? LightLevel { get; init; }

    [JsonPropertyName("light_level_valid")]
    public bool? LightLevelValid { get; init; }

    [JsonPropertyName("battery_state")]
    public string? BatteryState { get; init; }

    [JsonPropertyName("battery_voltage")]
    public double? BatteryVoltage { get; init; }

    [JsonPropertyName("arch")]
    public string? Arch { get; init; }

    [JsonPropertyName("brand")]
    public string? Brand { get; init; }

    [JsonPropertyName("ghz_advertised")]
    public double? GhzAdvertised { get; init; }

    [JsonPropertyName("light")]
    public double? Light { get; init; }

    [JsonPropertyName("motion")]
    public double? Motion { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public object? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("model_name")]
    public string? ModelName { get; init; }

    [JsonPropertyName("brand")]
    public string? Brand { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("motion_detection")]
    public bool? MotionDetection { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("camera_id")]
    public string? CameraId { get; init; }

    [JsonPropertyName("serial")]
    public string? Serial { get; init; }

    [JsonPropertyName("version")]
    public string? Version { get; init; }

    [JsonPropertyName("temperature")]
    public object? Temperature { get; init; }

    [JsonPropertyName("temperature_c")]
    public object? TemperatureC { get; init; }

    [JsonPropertyName("temperature_calibrated")]
    public object? TemperatureCalibrated { get; init; }

    [JsonPropertyName("battery")]
    public object? Battery { get; init; }

    [JsonPropertyName("battery_level")]
    public object? BatteryLevel { get; init; }

    [JsonPropertyName("battery_voltage")]
    public object? BatteryVoltage { get; init; }

    [JsonPropertyName("thumbnail")]
    public string? Thumbnail { get; init; }

    [JsonPropertyName("video")]
    public string? Video { get; init; }

    [JsonPropertyName("recent_clips")]
    public IReadOnlyList<object>? RecentClips { get; init; }

    [JsonPropertyName("motion_enabled")]
    public bool? MotionEnabled { get; init; }

    [JsonPropertyName("motion_detected")]
    public bool? MotionDetected { get; init; }

    [JsonPropertyName("wifi_strength")]
    public object? WifiStrength { get; init; }

    [JsonPropertyName("network_id")]
    public string? NetworkId { get; init; }

    [JsonPropertyName("sync_module")]
    public string? SyncModule { get; init; }

    [JsonPropertyName("sync_signal_strength")]
    public object? SyncSignalStrength { get; init; }

    [JsonPropertyName("last_record")]
    public string? LastRecord { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("video_url")]
    public string? VideoUrl { get; init; }

    [JsonPropertyName("last_video_id")]
    public double? LastVideoId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("target_temp_high")]
    public object? TargetTempHigh { get; init; }

    [JsonPropertyName("target_temp_low")]
    public object? TargetTempLow { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SttEntity : Entity<SttEntity, EntityState<SttAttributes>, SttAttributes>
{
    public SttEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SttEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SttAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("code_format")]
    public object? CodeFormat { get; init; }

    [JsonPropertyName("changed_by")]
    public object? ChangedBy { get; init; }

    [JsonPropertyName("code_arm_required")]
    public bool? CodeArmRequired { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("id")]
    public double? Id { get; init; }

    [JsonPropertyName("network_id")]
    public string? NetworkId { get; init; }

    [JsonPropertyName("serial")]
    public string? Serial { get; init; }

    [JsonPropertyName("version")]
    public object? Version { get; init; }

    [JsonPropertyName("status")]
    public bool? Status { get; init; }

    [JsonPropertyName("region_id")]
    public string? RegionId { get; init; }

    [JsonPropertyName("local_storage")]
    public bool? LocalStorage { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AutomationServices Automation { get; }

    BackupServices Backup { get; }

    BlinkServices Blink { get; }

    ButtonServices Button { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GroupServices Group { get; }

    HomeassistantServices Homeassistant { get; }

    HueServices Hue { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    RingServices Ring { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public BlinkServices Blink => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HueServices Hue => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RingServices Ring => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("automation", "reload", null, data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "toggle", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "turn_on", target, data);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a new backup.</summary>
    public void Create(object? data = null)
    {
        _haContext.CallService("backup", "create", null, data);
    }
}

public partial class BlinkServices
{
    private readonly IHaContext _haContext;
    public BlinkServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Requests camera to record a clip.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("blink", "record", target, data);
    }

    ///<summary>Saves all recent video clips to local directory with file pattern &quot;%Y%m%d_%H%M%S_[camera name].mp4&quot;.</summary>
    ///<param name="target">The target for this service call</param>
    public void SaveRecentClips(ServiceTarget target, BlinkSaveRecentClipsParameters data)
    {
        _haContext.CallService("blink", "save_recent_clips", target, data);
    }

    ///<summary>Saves all recent video clips to local directory with file pattern &quot;%Y%m%d_%H%M%S_[camera name].mp4&quot;.</summary>
    ///<param name="filePath">Directory name of writable path (directory may need to be included in allowlist_external_dirs in config). eg: /tmp</param>
    public void SaveRecentClips(ServiceTarget target, string filePath)
    {
        _haContext.CallService("blink", "save_recent_clips", target, new BlinkSaveRecentClipsParameters { FilePath = filePath });
    }

    ///<summary>Saves last recorded video clip to local file.</summary>
    ///<param name="target">The target for this service call</param>
    public void SaveVideo(ServiceTarget target, BlinkSaveVideoParameters data)
    {
        _haContext.CallService("blink", "save_video", target, data);
    }

    ///<summary>Saves last recorded video clip to local file.</summary>
    ///<param name="filename">Filename to writable path (directory may need to be included in allowlist_external_dirs in config). eg: /tmp/video.mp4</param>
    public void SaveVideo(ServiceTarget target, string filename)
    {
        _haContext.CallService("blink", "save_video", target, new BlinkSaveVideoParameters { Filename = filename });
    }

    ///<summary>Sends a new PIN to blink for 2FA.</summary>
    public void SendPin(BlinkSendPinParameters data)
    {
        _haContext.CallService("blink", "send_pin", null, data);
    }

    ///<summary>Sends a new PIN to blink for 2FA.</summary>
    ///<param name="configEntryId">The Blink Integration id.</param>
    ///<param name="pin">PIN received from blink. Leave empty if you only received a verification email. eg: abc123</param>
    public void SendPin(object configEntryId, string? pin = null)
    {
        _haContext.CallService("blink", "send_pin", null, new BlinkSendPinParameters { ConfigEntryId = configEntryId, Pin = pin });
    }

    ///<summary>Requests camera to take new image.</summary>
    ///<param name="target">The target for this service call</param>
    public void TriggerCamera(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("blink", "trigger_camera", target, data);
    }
}

public partial record BlinkSaveRecentClipsParameters
{
    ///<summary>Directory name of writable path (directory may need to be included in allowlist_external_dirs in config). eg: /tmp</summary>
    [JsonPropertyName("file_path")]
    public string? FilePath { get; init; }
}

public partial record BlinkSaveVideoParameters
{
    ///<summary>Filename to writable path (directory may need to be included in allowlist_external_dirs in config). eg: /tmp/video.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial record BlinkSendPinParameters
{
    ///<summary>The Blink Integration id.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }

    ///<summary>PIN received from blink. Leave empty if you only received a verification email. eg: abc123</summary>
    [JsonPropertyName("pin")]
    public string? Pin { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("button", "press", target, data);
    }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "disable_motion_detection", target, data);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "enable_motion_detection", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, double? duration = null, double? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_off", target, data);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_on", target, data);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public double? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "toggle", target, data);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_off", target, data);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_on", target, data);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_connect", null, data);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_disconnect", null, data);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public Task<JsonElement?> ProcessAsync(ConversationProcessParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public Task<JsonElement?> ProcessAsync(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "decrement", target, data);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "increment", target, data);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "reset", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover", target, data);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover_tilt", target, data);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover", target, data);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover_tilt", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, double position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, double tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover", target, data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target, data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle", target, data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target, data);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public double? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public double? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, double? gpsAccuracy = null, double? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public double? Battery { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public void DecreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public void IncreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="direction">Direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, double percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "toggle", target, data);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "turn_off", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, double? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decreases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes(object? data = null)
    {
        _haContext.CallService("frontend", "reload_themes", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("group", "reload", null, data);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a user group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "check_config", null, data);
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_all", null, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_core_config", null, data);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null, data);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart(object? data = null)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates(object? data = null)
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location. eg: 120</param>
    public void SetLocation(double latitude, double longitude, double? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop(object? data = null)
    {
        _haContext.CallService("homeassistant", "stop", null, data);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "toggle", target, data);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_off", target, data);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_on", target, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>Elevation of your location. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial class HueServices
{
    private readonly IHaContext _haContext;
    public HueServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void ActivateScene(ServiceTarget target, HueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "activate_scene", target, data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public void ActivateScene(ServiceTarget target, double? transition = null, bool? dynamic = null, double? speed = null, double? brightness = null)
    {
        _haContext.CallService("hue", "activate_scene", target, new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activates a hue scene stored in the hue hub.</summary>
    public void HueActivateScene(HueHueActivateSceneParameters data)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, data);
    }

    ///<summary>Activates a hue scene stored in the hue hub.</summary>
    ///<param name="groupName">Name of hue group/room from the hue app. eg: Living Room</param>
    ///<param name="sceneName">Name of hue scene from the hue app. eg: Energize</param>
    ///<param name="dynamic">Enable dynamic mode of the scene (V2 bridges and supported scenes only).</param>
    public void HueActivateScene(string? groupName = null, string? sceneName = null, bool? dynamic = null)
    {
        _haContext.CallService("hue", "hue_activate_scene", null, new HueHueActivateSceneParameters { GroupName = groupName, SceneName = sceneName, Dynamic = dynamic });
    }
}

public partial record HueActivateSceneParameters
{
    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>Enable dynamic mode of the scene.</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }

    ///<summary>Speed of dynamic palette for this scene.</summary>
    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    ///<summary>Set brightness for the scene.</summary>
    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }
}

public partial record HueHueActivateSceneParameters
{
    ///<summary>Name of hue group/room from the hue app. eg: Living Room</summary>
    [JsonPropertyName("group_name")]
    public string? GroupName { get; init; }

    ///<summary>Name of hue scene from the hue app. eg: Energize</summary>
    [JsonPropertyName("scene_name")]
    public string? SceneName { get; init; }

    ///<summary>Enable dynamic mode of the scene (V2 bridges and supported scenes only).</summary>
    [JsonPropertyName("dynamic")]
    public bool? Dynamic { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_boolean", "reload", null, data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "toggle", target, data);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_off", target, data);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_on", target, data);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_button", "press", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_button", "reload", null, data);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_datetime", "reload", null, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, TimeOnly? time = null, string? datetime = null, double? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Increments the value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_number", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_select", "reload", null, data);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_last", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, IEnumerable<string> options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public IEnumerable<string>? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_text", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void Toggle(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public void TurnOff(ServiceTarget target, double? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void TurnOn(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public double? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("brightness_step")]
    public double? BrightnessStep { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel(object? data = null)
    {
        _haContext.CallService("logger", "set_level", null, data);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_dteske_pixel integration.</summary>
    public void MobileAppDteskePixel(NotifyMobileAppDteskePixelParameters data)
    {
        _haContext.CallService("notify", "mobile_app_dteske_pixel", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_dteske_pixel integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppDteskePixel(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_dteske_pixel", null, new NotifyMobileAppDteskePixelParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_meg integration.</summary>
    public void MobileAppMeg(NotifyMobileAppMegParameters data)
    {
        _haContext.CallService("notify", "mobile_app_meg", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_meg integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppMeg(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_meg", null, new NotifyMobileAppMegParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyMobileAppDteskePixelParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppMegParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the notifications panel.</summary>
    public void DismissAll(object? data = null)
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null, data);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("person", "reload", null, data);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable(object? data = null)
    {
        _haContext.CallService("recorder", "disable", null, data);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable(object? data = null)
    {
        _haContext.CallService("recorder", "enable", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(double? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, double? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }
}

public partial class RingServices
{
    private readonly IHaContext _haContext;
    public RingServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Updates the data we have for all your ring devices.</summary>
    public void Update(object? data = null)
    {
        _haContext.CallService("ring", "update", null, data);
    }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, double? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("scene", "delete", target, data);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("scene", "reload", null, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, double? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("schedule", "reload", null, data);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("script", "reload", null, data);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "toggle", target, data);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_off", target, data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_on", target, data);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "toggle", target, data);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "turn_off", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "toggle", target, data);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_off", target, data);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_on", target, data);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear(object? data = null)
    {
        _haContext.CallService("system_log", "clear", null, data);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "cancel", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "finish", target, data);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "pause", target, data);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("timer", "reload", null, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache(object? data = null)
    {
        _haContext.CallService("tts", "clear_cache", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "clear_skipped", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "skip", target, data);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="commandType">Type of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="params">Parameters to pass to the command.</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, double endpointId, double clusterId, double command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group. eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, double clusterId, double command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins.</param>
    ///<param name="ieee">IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(double? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="attribute">ID of the attribute to set. eg: 0</param>
    ///<param name="value">Value to write to the attribute. eg: 1</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, double endpointId, double clusterId, double attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, double? mode = null, double? strobe = null, double? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, double? mode = null, double? strobe = null, double? level = null, double? duration = null, long? dutyCycle = null, double? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public double? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public double? Command { get; init; }

    ///<summary>Type of the command to execute.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Parameters to pass to the command.</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group. eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public double? Command { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set. eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public double? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the attribute to set. eg: 0</summary>
    [JsonPropertyName("attribute")]
    public double? Attribute { get; init; }

    ///<summary>Value to write to the attribute. eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public double? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public double? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public double? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public double? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public double? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public double? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public double? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("zone", "reload", null, data);
    }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class BlinkEntityExtensionMethods
{
    ///<summary>Requests camera to record a clip.</summary>
    public static void Record(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("record", data);
    }

    ///<summary>Requests camera to record a clip.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("record", data);
    }

    ///<summary>Saves all recent video clips to local directory with file pattern &quot;%Y%m%d_%H%M%S_[camera name].mp4&quot;.</summary>
    public static void SaveRecentClips(this ICameraEntityCore target, BlinkSaveRecentClipsParameters data)
    {
        target.CallService("save_recent_clips", data);
    }

    ///<summary>Saves all recent video clips to local directory with file pattern &quot;%Y%m%d_%H%M%S_[camera name].mp4&quot;.</summary>
    public static void SaveRecentClips(this IEnumerable<ICameraEntityCore> target, BlinkSaveRecentClipsParameters data)
    {
        target.CallService("save_recent_clips", data);
    }

    ///<summary>Saves all recent video clips to local directory with file pattern &quot;%Y%m%d_%H%M%S_[camera name].mp4&quot;.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filePath">Directory name of writable path (directory may need to be included in allowlist_external_dirs in config). eg: /tmp</param>
    public static void SaveRecentClips(this ICameraEntityCore target, string filePath)
    {
        target.CallService("save_recent_clips", new BlinkSaveRecentClipsParameters { FilePath = filePath });
    }

    ///<summary>Saves all recent video clips to local directory with file pattern &quot;%Y%m%d_%H%M%S_[camera name].mp4&quot;.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filePath">Directory name of writable path (directory may need to be included in allowlist_external_dirs in config). eg: /tmp</param>
    public static void SaveRecentClips(this IEnumerable<ICameraEntityCore> target, string filePath)
    {
        target.CallService("save_recent_clips", new BlinkSaveRecentClipsParameters { FilePath = filePath });
    }

    ///<summary>Saves last recorded video clip to local file.</summary>
    public static void SaveVideo(this ICameraEntityCore target, BlinkSaveVideoParameters data)
    {
        target.CallService("save_video", data);
    }

    ///<summary>Saves last recorded video clip to local file.</summary>
    public static void SaveVideo(this IEnumerable<ICameraEntityCore> target, BlinkSaveVideoParameters data)
    {
        target.CallService("save_video", data);
    }

    ///<summary>Saves last recorded video clip to local file.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Filename to writable path (directory may need to be included in allowlist_external_dirs in config). eg: /tmp/video.mp4</param>
    public static void SaveVideo(this ICameraEntityCore target, string filename)
    {
        target.CallService("save_video", new BlinkSaveVideoParameters { Filename = filename });
    }

    ///<summary>Saves last recorded video clip to local file.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Filename to writable path (directory may need to be included in allowlist_external_dirs in config). eg: /tmp/video.mp4</param>
    public static void SaveVideo(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("save_video", new BlinkSaveVideoParameters { Filename = filename });
    }

    ///<summary>Requests camera to take new image.</summary>
    public static void TriggerCamera(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("trigger_camera", data);
    }

    ///<summary>Requests camera to take new image.</summary>
    public static void TriggerCamera(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("trigger_camera", data);
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("close_cover", data);
    }

    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("close_cover", data);
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("close_cover_tilt", data);
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("close_cover_tilt", data);
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("open_cover", data);
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("open_cover", data);
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("open_cover_tilt", data);
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("open_cover_tilt", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this ICoverEntityCore target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this ICoverEntityCore target, double position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, double position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, double tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, double tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("stop_cover", data);
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("stop_cover", data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("stop_cover_tilt", data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("stop_cover_tilt", data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("toggle_cover_tilt", data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("toggle_cover_tilt", data);
    }
}

public static class HueEntityExtensionMethods
{
    ///<summary>Activates a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this ISceneEntityCore target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    public static void ActivateScene(this IEnumerable<ISceneEntityCore> target, HueActivateSceneParameters data)
    {
        target.CallService("activate_scene", data);
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this ISceneEntityCore target, double? transition = null, bool? dynamic = null, double? speed = null, double? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }

    ///<summary>Activates a Hue scene with more control over the options.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    ///<param name="dynamic">Enable dynamic mode of the scene.</param>
    ///<param name="speed">Speed of dynamic palette for this scene.</param>
    ///<param name="brightness">Set brightness for the scene.</param>
    public static void ActivateScene(this IEnumerable<ISceneEntityCore> target, double? transition = null, bool? dynamic = null, double? speed = null, double? brightness = null)
    {
        target.CallService("activate_scene", new HueActivateSceneParameters { Transition = transition, Dynamic = dynamic, Speed = speed, Brightness = brightness });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this ILightEntityCore target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this ISceneEntityCore target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<ISceneEntityCore> target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}